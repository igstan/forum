CODING STANDARDS
================

This document provides guidelines for code formatting to individuals and teams
contributing to this project. It is based on Zend Framework's coding standards
guidelines, to which were added guidelines for namespaces and anonymous
functions.


PHP File Formatting
-------------------

### General
For files that contain only PHP code, the closing tag ("?>") is never permitted.
It is not required by PHP, and omitting itÂ´ prevents the accidental injection of
trailing white space into the response.

### Indentation
Indentation should consist of 4 spaces. Tabs are not allowed.

### Maximum line length
The target line length is 80 characters. That is to say, developers should strive
keep each line of their code under 80 characters where possible and practical.
However, longer lines are acceptable in some circumstances. The maximum length of
any line of PHP code is 120 characters.

### Line Termination
Line termination follows the Unix text file convention. Lines must end with a
single linefeed (LF) character. Linefeed characters are represented as ordinal
10, or hexadecimal 0x0A.


Naming Conventions
------------------

### Namespaces
This project standardizes on a namespace and class naming convention whereby the
names of the namespaces and classes directly map to the directories in which they
are stored. The vendor namespace for this project is "Forum" for the moment. It
is just a temporary name until the community decides a new one. The root level
directory of this project's standard library is thus the "Forum/" directory.

Namespace names may only contain alphanumeric characters and start with an
uppercase letter. Numbers are permitted but are discouraged in most cases.
Underscores are not permitted. The filename "Forum/User.php" must map to the
class name "Forum\User".

### Classes
Class names may only contain alphanumeric characters and start with an uppercase
letter. Numbers are permitted in class names but are discouraged in most cases.
Underscores are not permitted. The filename "Forum/User.php" must map to the
class name "Forum\User".

If a class name is comprised of more than one word, the first letter of each new
word must be capitalized. Successive capitalized letters are not allowed, e.g. a
class "HTTPClient" is not allowed while "HttpClient" is acceptable.

See the class names in the src/Forum directory for examples of this class name
convention.

### Abstract Classes
In general, abstract classes follow the same conventions as classes, with one
additional rule: abstract class names must begin with the term, "Abstract", and
that term must not be preceded by an underscore. As an example, AbstractPerson
would be a valid name.

### Interfaces
In general, interfaces follow the same conventions as classes, with one additional
rule: interface names may optionally end in the term, "Interface", but that term
must not be preceded by an underscore. As an example, DatabaseInterface would be
a valid name.

While this rule is not required, it is strongly recommended, as it provides a
good visual cue to developers as to which files contain interfaces rather than
classes.

### Filenames
For all other files, only alphanumeric characters, underscores, and the dash
character ("-") are permitted. Spaces are strictly prohibited.

Any file that contains PHP code should end with the extension ".php".

File names must map to class names as described above.

### Functions and Methods
Function names may only contain alphanumeric characters. Underscores are not
permitted. Numbers are permitted in function names but are discouraged in most
cases.

Function names must always start with a lowercase letter. When a function name
consists of more than one word, the first letter of each new word must be
capitalized. This is commonly called "camelCase" formatting.

Verbosity is generally encouraged. Function names should be as verbose as is
practical to fully describe their purpose and behavior.

These are examples of acceptable names for functions:

    filterInput()

    getElementById()

    registerUser()

For object-oriented programming, accessors for instance or static variables should
always be prefixed with "get" or "set". In implementing design patterns, such as
the singleton or factory patterns, the name of the method should contain the
pattern name where practical to more thoroughly describe behavior.

### Variables
Variable names may only contain alphanumeric characters. Underscores are not
permitted. Numbers are permitted in variable names but are discouraged in most
cases.

As with function names, variable names must always start with a lowercase letter
and follow the "camelCaps" capitalization convention.

Verbosity is generally encouraged. Variables should always be as verbose as
practical to describe the data that the developer intends to store in them.
Terse variable names such as "$i" and "$n" are discouraged for all but the
smallest loop contexts. If a loop contains more than 20 lines of code, the index
variables should have more descriptive names. Even better, consider extracting
the code in the loop into a separate function.

### Constants
Constants may contain both alphanumeric characters and underscores. Numbers are
permitted in constant names.

All letters used in a constant name must be capitalized, while all words in a
constant name must be separated by underscore characters.

For example, EMBED_SUPPRESS_EMBED_EXCEPTION is permitted but
EMBED_SUPPRESSEMBEDEXCEPTION is not.

Constants defined outside classes should use the "define" function because the
"const" form does not permit expressions as values.

Coding Style
------------

### PHP Code Demarcation
PHP code must always be delimited by the full-form, standard PHP tags:

    <?php

    ?>

Short tags are never allowed. For files containing only PHP  code, the closing
tag must always be omitted.

### Require and Include
"require", "require_once", "include" and "include_once" statements must not be
used with parantheses, unless when they return values.

    require 'Some/File.php';

    $a = include('Some/File.php');

### String Literals
When a string is literal (contains no variable substitutions), the apostrophe or
"single quote" should always be used to demarcate the string:

    $a = 'Example String';

### String Literals Containing Apostrophes
When a literal string itself contains apostrophes, it is permitted to demarcate
the string with quotation marks or "double quotes". This is especially useful
for SQL statements:

    $sql = "SELECT `id`, `name` from `people` "
         . "WHERE `name`='Fred' OR `name`='Susan'";

This syntax is preferred over escaping apostrophes as it is much easier to read.

### Variable substitution
Variable substitution is permitted using either of these forms:

    $greeting = "Hello $name, welcome back!";
    $greeting = "Hello {$name}, welcome back!";

For consistency, this form is not permitted:

    $greeting = "Hello ${name}, welcome back!";

### String Concatenation
These rules apply when strings are concatenated using the "." operator or ","
when using echo. A space must always be added before and after the "." (or ",")
operator to improve readability:

    $company = 'PHP' . ' ' . 'Forum';

    echo 'PHP' , ' ' , 'Forum';

### Numerically Indexed Arrays
Negative numbers are not permitted as indices.

An indexed array may start with any non-negative number, however all base indices
besides 0 are discouraged.

When declaring indexed arrays with the "array" construct, a trailing space must
be added after each comma delimiter to improve readability:

    $sampleArray = array(1, 2, 3);

It is permitted to declare multi-line indexed arrays using the "array" construct.
In this case, each successive line must be padded with spaces such that beginning
of each line is aligned:

    $sampleArray = array(1, 2, 3, 'PHP', 'Forum',
                       $a, $b, $c,
                       56.44, $d, 500);

Alternately, the initial array item may begin on the following line. If so, it
should be padded at one indentation level greater than the line containing the
array declaration, and all successive lines should have the same indentation;
the closing parenthesis should be on a line by itself at the same indentation
level as the line containing the array declaration:

    $sampleArray = array(
      1, 2, 3, 'PHP', 'Forum',
      $a, $b, $c,
      56.44, $d, 500,
    );

This form is preferred over the previous one.

When using this latter declaration, we encourage using a trailing comma for the
last item in the array; this minimizes the impact of adding new items on
successive lines, and helps to ensure no parse errors occur due to a missing
comma.

### Associative Arrays
When declaring associative arrays with the "array" construct, breaking the
statement into multiple lines is encouraged. In this case, each successive line
must be padded with white space such that both the keys and the values are
aligned:

    $sampleArray = array('firstKey'  => 'firstValue',
                       'secondKey' => 'secondValue');

Alternately, the initial array item may begin on the following line. If so, it
should be padded at one indentation level greater than the line containing the
array declaration, and all successive lines should have the same indentation;
the closing parenthesis should be on a line by itself at the same indentation
level as the line containing the array declaration. For readability, the various
"=>" assignment operators should be padded such that they align.

    $sampleArray = array(
      'key'           => 'firstValue',
      'longerKeyName' => 'secondValue',
    );

This form is preferred over the previous one.

When using this latter declaration, we encourage using a trailing comma for the
last item in the array; this minimizes the impact of adding new items on
successive lines, and helps to ensure no parse errors occur due to a missing
comma.

### Namespace Declaration
Namespaces must be named according to this project's naming conventions. They
must appear immediately after the file-level docblock, leaving one empty line
between them for visual separation.

    <?php
    /**
     * @author  Ion Popescu
     * @license http://opensource.org/licenses/bsd-license.php BSD License
     */

     namespace Forum\Controllers;

### Namespace importing
Namespace "use" statements must come after namespace declaration, leaving one
empty line between them for visual separation. Successive "use" statements should
not be separated by empty lines, unless they come from different libraries and
empty lines are used for grouping them visually:

    <?php
    /**
     * @author  Ion Popescu
     * @license http://opensource.org/licenses/bsd-license.php BSD License
     */

     namespace Forum\Controllers;

     use Forum\Models\User;
     use Forum\Models\Post;
     use Forum\Models\Thread;

     use Zend\Controller\Front;
     use Zend\Http\Client;

### Class Declaration
Classes must be named according to this project's naming conventions.

The brace should always be written on the line underneath the class name.

A class MAY have a documentation block that conforms to the PHPDocumentor
standard as long as its description tells something useful about the class.

All code in a class must be indented with four spaces.

Only one class is permitted in each PHP file.

Placing additional code in class files is permitted but discouraged.

The following is an example of an acceptable class declaration:

    /**
     * Documentation Block Here
     */
    class SampleClass
    {
        // all contents of class
        // must be indented four spaces
    }

Classes that extend other classes or which implement interfaces should declare
their dependencies on the same line when possible.

    class SampleClass extends AbstractFoo implements BarInterface
    {}

If as a result of such declarations, the line length exceeds the maximum line
length (120 characters), break the line before the "extends" and/or "implements"
keywords, and pad those lines by one indentation level.

    class SampleClass
        extends AbstractFoo
        implements BarInterface
    {}

If the class implements multiple interfaces and the declaration exceeds the
maximum line length, break after each comma separating the interfaces, and
indent the interface names such that they align.

    class SampleClass
        implements BarInterface,
                   BazInterface
    {}

### Class Member Variables
Member variables must be named according to this project's variable naming
conventions.

Any variables declared in a class must be listed at the top of the class, above
the declaration of any methods.

The var construct is not permitted. Member variables always declare their
visibility by using one of the private, protected, or public modifiers. Giving
access to member variables directly by declaring them as public is permitted but
discouraged in favor of accessor methods (set & get).

### Function and Method Declaration
Functions must be named according to the function naming conventions.

Methods inside classes must always declare their visibility by using one of the
private, protected, or public modifiers.

As with classes, the brace should always be written on the line underneath the
function name. Space between the function name and the opening parenthesis for
the arguments is not permitted.

The following is an example of an acceptable function declaration in a class:

    /**
     * Documentation Block Here
     */
    class Foo
    {
        /**
         * Documentation Block Here
         */
        public function bar()
        {
            // all contents of function
            // must be indented four spaces
        }
    }

The following is an example of an acceptable function declaration in a namespace:

    function filterInput($input)
    {
        // function implementation
    }

As opposed to named functions, anonymous functions must have their opening brace
placed in the same line with the function keyword. A space must be placed between
the "function" keyword and the argument parantheses (as it is the case with
control structures like if, for, while, switch). A space must also be placed
before and after the "use" keyword for functions using closures. For mutable
closed variables there is no space between the ampersand "&" and the variable
name.

    function ($foo) use ($bar, &$baz) {
        // implementation
    }

In cases where the argument list exceeds the maximum line length, you may
introduce line breaks. Additional arguments to the function or method must be
indented one additional level beyond the function or method declaration. A line
break should then occur before the closing argument parenthesis, which should
then be placed on the same line as the opening brace of the function or method
with one space separating the two, and at the same indentation level as the
function or method declaration. The following is an example of one such
situation:

    class Foo
    {
      public function bar($arg1, $arg2, $arg3,
          $arg4, $arg5, $arg6
      ) {
          // all contents of function
          // must be indented four spaces
      }
    }

However, if you ever need a function requiring more than two or three parameters
it is time to rethink your design.

The return value must not be enclosed in parentheses. This can hinder readability,
in additional to breaking code if a method is later changed to return by reference.

    /**
     * WRONG
     */
    function bar()
    {
        return("bar");
    }

    /**
     * RIGHT
     */
    function bar()
    {
        return "bar";
    }

### Function and Method Usage
Function arguments should be separated by a single trailing space after the comma
delimiter. The following is an example of an acceptable invocation of a function
that takes three arguments:

    threeArguments(1, 2, 3);

Call-time pass-by-reference is strictly prohibited.

In passing arrays as arguments to a function, the function call may include the
"array" hint and may be split into multiple lines to improve readability. In
such cases, the normal guidelines for writing arrays still apply:

    threeArguments(array(1, 2, 3), 2, 3);

    threeArguments(array(1, 2, 3, 'PHP', 'Forum',
                       $a, $b, $c,
                       56.44, $d, 500), 2, 3);

    threeArguments(array(
      1, 2, 3, 'PHP', 'Forum',
      $a, $b, $c,
      56.44, $d, 500
    ), 2, 3);

### If/Else/Elseif
Control statements based on the if and elseif constructs must have a single space
before the opening parenthesis of the conditional and a single space after the
closing parenthesis.

Within the conditional statements between the parentheses, operators must be
separated by spaces for readability. Inner parentheses are encouraged to improve
logical grouping for larger conditional expressions.

The opening brace is written on the same line as the conditional statement. The
closing brace is always written on its own line. Any content within the braces
must be indented using four spaces.

    if ($a !== 2) {
      $a = 2;
    }

If the conditional statement causes the line length to exceed the maximum line
length and has several clauses, you may break the conditional into multiple lines.
In such a case, break the line prior to a logic operator, and pad the line such
that it aligns under the first character of the conditional clause. The closing
parenthesis in the conditional will then be placed on a line with the opening
brace, with one space separating the two, at an indentation level equivalent to
the opening control statement. It is however strongly encouraged that you
extract the condition into a function of its own.

    // CORRECT
    if (($a == $b)
      && ($b == $c)
      || (Foo::CONST == $d)
    ) {
      $a = $d;
    }

    // PREFERRED
    if (satisfySomeConditions($a, $b, $c)) {

    }

For "if" statements that include "elseif" or "else", the formatting conventions
are similar to the "if" construct. The following examples demonstrate proper
formatting for "if" statements with "else" and/or "elseif" constructs:

    if ($a != 2) {
      $a = 2;
    } else {
      $a = 7;
    }

    if ($a != 2) {
      $a = 2;
    } elseif ($a == 3) {
      $a = 4;
    } else {
      $a = 7;
    }

    if (($a == $b)
      && ($b == $c)
      || (Foo::CONST == $d)
    ) {
      $a = $d;
    } elseif (($a != $b)
            || ($b != $c)
    ) {
      $a = $c;
    } else {
      $a = $b;
    }

PHP allows statements to be written without braces in some circumstances. This
coding standard makes no differentiation - all "if", "elseif" or "else"
statements must use braces.

### Switch
Control statements written with the "switch" statement must have a single space
before the opening parenthesis of the conditional statement and after the closing
parenthesis.

All content within the "switch" statement must be indented using four spaces.
Content under each "case" statement must be indented using an additional four
spaces. A empty line must follow each case section.

    switch ($numPeople) {
      case 1:
          // case
          break;

      case 2:
          // case 2
          break;

      default:
         // default case
    }

The construct default should never be omitted from a switch statement. It also
should not contain the "break" statement.

Note: It is sometimes useful to write a case statement which falls through to
the next case by not including a break  or return  within that case. To distinguish
these cases from bugs, any case statement where break or return are omitted should
contain a comment indicating that the break was intentionally omitted.

### Documentation Format
All documentation blocks ("docblocks") must be compatible with the phpDocumentor
format. Describing the phpDocumentor format is beyond the scope of this document.
For more information, visit http://phpdoc.org/.

All PHP files must contain a "file-level" docblock at the top of the file, which
should include at least the author/contributor names and license info.

    <?php
    /**
     * @author  Ion Popescu
     * @license http://opensource.org/licenses/bsd-license.php BSD License
     */

Classes, methods, functions, constants and instance variables are all allowed to
have associated docblocks. It is however strongly recommended to not make abuse.
Use them only when there the information you want to convey cannot be easily
determined from the name of the symbol. Redundant descriptions, like the following
are not permitted:

    /**
     * Sets user access
     */
    function setUserAccess()
    {}
